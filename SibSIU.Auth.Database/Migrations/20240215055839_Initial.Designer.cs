// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SibSIU.Auth.Database;

#nullable disable

namespace SibSIU.Auth.Database.Migrations
{
    [DbContext(typeof(AuthContext))]
    [Migration("20240215055839_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SibSIU.Auth.Database.Entities.AuthClaim", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ClaimTypeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ScopeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("ClaimTypeId");

                    b.HasIndex("ScopeId");

                    b.HasIndex("UserId");

                    b.ToTable("Claims");
                });

            modelBuilder.Entity("SibSIU.Auth.Database.Entities.AuthClaimType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTimeOffset>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.ToTable("ClaimTypes");
                });

            modelBuilder.Entity("SibSIU.Auth.Database.Entities.Scope", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTimeOffset>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.ToTable("Scopes");
                });

            modelBuilder.Entity("SibSIU.Auth.Database.Entities.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "01HPNNGYTNQA05898N3B5NG6HH",
                            RoleId = "01HPNNGYC7NBATNH78YT22916B",
                            Version = 0L
                        });
                });

            modelBuilder.Entity("SibSIU.Auth.Database.Entities.WorkPlaces", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UnitId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UnitId");

                    b.HasIndex("UserId", "UnitId", "PostId")
                        .IsUnique()
                        .HasDatabaseName("UserWorkPlaceIndex");

                    b.ToTable("WorkPlaces");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.AcademicForm", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DeanCode")
                        .HasColumnType("integer");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTimeOffset>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("DeanCode")
                        .IsUnique()
                        .HasDatabaseName("FormDeanCodeIndex");

                    b.ToTable("AcademicForms");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.AcademicGroup", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AcademicFormId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AcademicLevelId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DirectionOfTrainingId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DirectorateInstituteId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<int>("StartYear")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("AcademicFormId");

                    b.HasIndex("AcademicLevelId");

                    b.HasIndex("DirectionOfTrainingId");

                    b.HasIndex("DirectorateInstituteId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("GroupNameIndex");

                    b.ToTable("AcademicGroups");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.AcademicLevel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DeanCode")
                        .HasColumnType("integer");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTimeOffset>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("DeanCode")
                        .IsUnique()
                        .HasDatabaseName("LevelDeanCodeIndex");

                    b.ToTable("AcademicLevels");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.DepartmentUnit", b =>
                {
                    b.Property<string>("UnitId")
                        .HasColumnType("text");

                    b.HasKey("UnitId");

                    b.ToTable("DepartmentUnits");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.DirectionOfTraining", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DeanCode")
                        .HasColumnType("integer");

                    b.Property<string>("DeveloperInstituteId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImplementingChairId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTimeOffset>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("DeanCode")
                        .IsUnique()
                        .HasDatabaseName("DotDeanCodeIndex");

                    b.HasIndex("DeveloperInstituteId");

                    b.HasIndex("ImplementingChairId");

                    b.ToTable("DirectionOfTraining");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.Gender", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTimeOffset>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = "01HPNNGYC7WBA31XCDG6BJK960",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 2, 15, 5, 58, 38, 727, DateTimeKind.Unspecified).AddTicks(5687), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            Name = "Мужской",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 2, 15, 5, 58, 38, 727, DateTimeKind.Unspecified).AddTicks(5687), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HPNNGYC7GVB4SJNWHS2BPMZE",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 2, 15, 5, 58, 38, 727, DateTimeKind.Unspecified).AddTicks(5687), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            Name = "Женский",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 2, 15, 5, 58, 38, 727, DateTimeKind.Unspecified).AddTicks(5687), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        });
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.InstituteUnit", b =>
                {
                    b.Property<string>("UnitId")
                        .HasColumnType("text");

                    b.HasKey("UnitId");

                    b.ToTable("InstituteUnits");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.Organization", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("KPP")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)");

                    b.Property<string>("OGRN")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("TIN")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTimeOffset>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("OGRN")
                        .IsUnique()
                        .HasDatabaseName("OrganizationOGRNIndex");

                    b.HasIndex("TIN")
                        .IsUnique()
                        .HasDatabaseName("OrganizationTINIndex");

                    b.ToTable("Organizations");

                    b.HasData(
                        new
                        {
                            Id = "01HPNNGYC7JF6D3CEKEJ23EFW8",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 2, 15, 5, 58, 38, 727, DateTimeKind.Unspecified).AddTicks(5687), new TimeSpan(0, 0, 0, 0, 0)),
                            FullName = "Федеральное государственное бюджетное образовательное учреждение высшего образования «Сибирский государственный индустриальный университет»",
                            IsActive = true,
                            KPP = "421701001",
                            OGRN = "1024201470908",
                            ShortName = "СибГИУ",
                            TIN = "4216003509",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 2, 15, 5, 58, 38, 727, DateTimeKind.Unspecified).AddTicks(5687), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        });
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.Partner", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("OrganizationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.Post", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTimeOffset>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("PostNameIndex");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.Pupil", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<char>("ClassLitter")
                        .HasColumnType("character(1)");

                    b.Property<int>("ClassNumber")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("UserId");

                    b.ToTable("Pupils");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTimeOffset>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "01HPNNGYC7NBATNH78YT22916B",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 2, 15, 5, 58, 38, 727, DateTimeKind.Unspecified).AddTicks(5687), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            Name = "Администратор",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 2, 15, 5, 58, 38, 727, DateTimeKind.Unspecified).AddTicks(5687), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        });
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.School", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTimeOffset>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.Student", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AcademicGroupId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DeanCode")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<double>("Rank")
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("AcademicGroupId");

                    b.HasIndex("DeanCode")
                        .IsUnique()
                        .HasDatabaseName("StudentDeanCodeIndex");

                    b.HasIndex("UserId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.TempStudentDeanCodeFromDeanDB", b =>
                {
                    b.Property<int>("DeanCode")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.Property<double>("Rank")
                        .HasColumnType("double precision");

                    b.HasKey("DeanCode");

                    b.ToTable("TempStudents");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.Unit", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeanCode")
                        .HasColumnType("integer");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ParentId")
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTimeOffset>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Units");

                    b.HasData(
                        new
                        {
                            Id = "01HPNNGYC7ZQEASNRB2B3ZPK30",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 2, 15, 5, 58, 38, 727, DateTimeKind.Unspecified).AddTicks(5687), new TimeSpan(0, 0, 0, 0, 0)),
                            FullName = "Федеральное государственное бюджетное образовательное учреждение высшего образования «Сибирский государственный индустриальный университет»",
                            IsActive = true,
                            ShortName = "СибГИУ",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 2, 15, 5, 58, 38, 727, DateTimeKind.Unspecified).AddTicks(5687), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        });
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("BirthOfDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("GenderId")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConfirmedUser")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTemporaryPassword")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTimeOffset>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("GenderId");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "01HPNNGYTNQA05898N3B5NG6HH",
                            BirthOfDate = new DateTimeOffset(new DateTime(2001, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreateAt = new DateTimeOffset(new DateTime(2024, 2, 15, 5, 58, 38, 727, DateTimeKind.Unspecified).AddTicks(5687), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "admin@sibsiu.ru",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            GenderId = "01HPNNGYC7WBA31XCDG6BJK960",
                            IsActive = true,
                            IsConfirmedUser = true,
                            IsTemporaryPassword = false,
                            LastName = "Admin",
                            Password = "I6iE0+cNBC2Z1f0UI8xARXpCWaCaEsEqHMR0HABH1qjSnTI8n6HPuGYoaHOlkPfEty0++y5bk39zo7ZAbHrHRA==",
                            PasswordSalt = "tXxuQ5GlTbUg2vqCN54TTGUdhSGdzuNnGTOIqhma51KhNYknO/wkq2LCw0q5BB68/RK0CRT3L0RUtoCDILtEBA==",
                            Patronymic = "Admin",
                            PhoneNumber = "+7-(900)-00-00-0000",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 2, 15, 5, 58, 38, 727, DateTimeKind.Unspecified).AddTicks(5687), new TimeSpan(0, 0, 0, 0, 0)),
                            UserName = "Admin",
                            Version = 0u
                        });
                });

            modelBuilder.Entity("SibSIU.Auth.Database.Entities.AuthClaim", b =>
                {
                    b.HasOne("SibSIU.Auth.Database.Entities.AuthClaimType", "ClaimType")
                        .WithMany("Claims")
                        .HasForeignKey("ClaimTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SibSIU.Auth.Database.Entities.Scope", "Scope")
                        .WithMany("Claims")
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SibSIU.UserData.Database.Entities.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClaimType");

                    b.Navigation("Scope");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SibSIU.Auth.Database.Entities.UserRole", b =>
                {
                    b.HasOne("SibSIU.UserData.Database.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SibSIU.UserData.Database.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SibSIU.Auth.Database.Entities.WorkPlaces", b =>
                {
                    b.HasOne("SibSIU.UserData.Database.Entities.Post", "Post")
                        .WithMany("EmployeeUnits")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SibSIU.UserData.Database.Entities.Unit", "Unit")
                        .WithMany("Employees")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SibSIU.UserData.Database.Entities.User", "User")
                        .WithMany("WorkPlaces")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Unit");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.AcademicGroup", b =>
                {
                    b.HasOne("SibSIU.UserData.Database.Entities.AcademicForm", "Form")
                        .WithMany("Groups")
                        .HasForeignKey("AcademicFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SibSIU.UserData.Database.Entities.AcademicLevel", "Level")
                        .WithMany("Groups")
                        .HasForeignKey("AcademicLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SibSIU.UserData.Database.Entities.DirectionOfTraining", "DirectionOfTraining")
                        .WithMany("AcademicGroups")
                        .HasForeignKey("DirectionOfTrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SibSIU.UserData.Database.Entities.InstituteUnit", "DirectorateInstitute")
                        .WithMany("AcademicGroupsInDirectorate")
                        .HasForeignKey("DirectorateInstituteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DirectionOfTraining");

                    b.Navigation("DirectorateInstitute");

                    b.Navigation("Form");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.DepartmentUnit", b =>
                {
                    b.HasOne("SibSIU.UserData.Database.Entities.Unit", "Unit")
                        .WithOne("DepartmentUnit")
                        .HasForeignKey("SibSIU.UserData.Database.Entities.DepartmentUnit", "UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.DirectionOfTraining", b =>
                {
                    b.HasOne("SibSIU.UserData.Database.Entities.InstituteUnit", "DeveloperInstitute")
                        .WithMany("DevelopDirectionOfTraining")
                        .HasForeignKey("DeveloperInstituteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SibSIU.UserData.Database.Entities.DepartmentUnit", "ImplementingChair")
                        .WithMany("ImplementedDirections")
                        .HasForeignKey("ImplementingChairId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeveloperInstitute");

                    b.Navigation("ImplementingChair");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.InstituteUnit", b =>
                {
                    b.HasOne("SibSIU.UserData.Database.Entities.Unit", "Unit")
                        .WithOne("InstituteUnit")
                        .HasForeignKey("SibSIU.UserData.Database.Entities.InstituteUnit", "UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.Partner", b =>
                {
                    b.HasOne("SibSIU.UserData.Database.Entities.Organization", "Organization")
                        .WithMany("Partners")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SibSIU.UserData.Database.Entities.Post", "Post")
                        .WithMany("Partners")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SibSIU.UserData.Database.Entities.User", "User")
                        .WithMany("Partners")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.Pupil", b =>
                {
                    b.HasOne("SibSIU.UserData.Database.Entities.School", "School")
                        .WithMany("Pupils")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SibSIU.UserData.Database.Entities.User", "User")
                        .WithMany("Pupils")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.Student", b =>
                {
                    b.HasOne("SibSIU.UserData.Database.Entities.AcademicGroup", "Group")
                        .WithMany("Students")
                        .HasForeignKey("AcademicGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SibSIU.UserData.Database.Entities.User", "User")
                        .WithMany("Students")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.Unit", b =>
                {
                    b.HasOne("SibSIU.UserData.Database.Entities.Unit", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.User", b =>
                {
                    b.HasOne("SibSIU.UserData.Database.Entities.Gender", "Gender")
                        .WithMany("Users")
                        .HasForeignKey("GenderId");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("SibSIU.Auth.Database.Entities.AuthClaimType", b =>
                {
                    b.Navigation("Claims");
                });

            modelBuilder.Entity("SibSIU.Auth.Database.Entities.Scope", b =>
                {
                    b.Navigation("Claims");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.AcademicForm", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.AcademicGroup", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.AcademicLevel", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.DepartmentUnit", b =>
                {
                    b.Navigation("ImplementedDirections");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.DirectionOfTraining", b =>
                {
                    b.Navigation("AcademicGroups");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.Gender", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.InstituteUnit", b =>
                {
                    b.Navigation("AcademicGroupsInDirectorate");

                    b.Navigation("DevelopDirectionOfTraining");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.Organization", b =>
                {
                    b.Navigation("Partners");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.Post", b =>
                {
                    b.Navigation("EmployeeUnits");

                    b.Navigation("Partners");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.School", b =>
                {
                    b.Navigation("Pupils");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.Unit", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("DepartmentUnit");

                    b.Navigation("Employees");

                    b.Navigation("InstituteUnit");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.User", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Partners");

                    b.Navigation("Pupils");

                    b.Navigation("Students");

                    b.Navigation("UserRoles");

                    b.Navigation("WorkPlaces");
                });
#pragma warning restore 612, 618
        }
    }
}
