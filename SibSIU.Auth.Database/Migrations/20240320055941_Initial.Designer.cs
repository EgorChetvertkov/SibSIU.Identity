// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SibSIU.Auth.Database;

#nullable disable

namespace SibSIU.Auth.Database.Migrations
{
    [DbContext(typeof(AuthContext))]
    [Migration("20240320055941_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SibSIU.Auth.Database.Entities.AuthClaim", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ClaimTypeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("ClaimTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Claims");
                });

            modelBuilder.Entity("SibSIU.Auth.Database.Entities.AuthClaimType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IncludeInAccessToken")
                        .HasColumnType("boolean");

                    b.Property<bool>("IncludeInIdentityToken")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTimeOffset>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.ToTable("ClaimTypes");

                    b.HasData(
                        new
                        {
                            Id = "01HSD738SGASQ781MVC1MMB85Z",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = true,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "sub",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGDAR2HVJN4VRZCXXN",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = true,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "at_hash",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGAPNNBY86P9B6TJJB",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = false,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "active",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGZKQ38YH6ZK83B0QB",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = false,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "address",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGGKPS68GXW1J56WVC",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = true,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "aud",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SG4RPZJ231694WB85D",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = true,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "acr",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGRC3F051BTBPJXZC3",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = true,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "amr",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SG8TY0KMCEG5VEGJEQ",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = true,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "auth_time",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGMCK1HQ694X027PNH",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = true,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "as",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGY11JTJ33VBRA809E",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = true,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "azp",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SG0AYHR2QJDJKM7E2C",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = false,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "birthdate",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGKVZRDWAKH27RYMTR",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = true,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "client_id",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SG3ZKTQB2MDXVM7FN7",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = true,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "c_hash",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGAXWFXZAPM9X9AV19",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = false,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "country",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGZYB8QEJJJBHZX89B",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = false,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "email",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGYHWFBDBDF9RMZ1KA",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = false,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "email_verified",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGT8A6RW3AJEY2YQZK",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = true,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "exp",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SG9XQTQWX81N58BESF",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = false,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "family_name",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGQ37F2FYAE2D7AXZJ",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = false,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "formatted",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGJ8PP0G2WGNPE420X",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = false,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "gender",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGB372K9CACNFWN003",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = false,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "given_name",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGP5EQ75GF11W5Z3R1",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = true,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "iat",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGMH6PQBEDQBQTHJF7",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = true,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "iss",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGCWAK8P8080G2AWMD",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = true,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "jti",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGAQAYMK05VCQB8F09",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = true,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "kid",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGEVM9YBM493HCQ981",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = false,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "locale",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGNWM10FJK2MA0BHT7",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = false,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "locality",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SG1D8A2267BBGA35NF",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = false,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "middle_name",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGHQWS4BHV6PN3DRGY",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = false,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "name",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGM4RN34B6T0V5ZHC8",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = false,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "nickname",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGSPQ2J37S9VPSS5F5",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = true,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "nonce",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SG4MKQZ3S7QVW2YAW9",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = true,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "nbf",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGWZ03W6743Q291NJ5",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = false,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "phone_number",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SG7QSRQQG4ZV26YWPA",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = false,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "phone_number_verified",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGRTQA0V5Q3MJG87BD",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = false,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "picture",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SG7RY2YQADTS6GH20M",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = false,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "postal_code",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SG9AXMAFBHBSW7H482",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = false,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "preferred_username",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SG1BM7RYESSB3KG1JE",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = false,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "profile",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGKZTG470TCSY7MFPK",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = false,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "region",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SG1JBG8974Q69F1A2Y",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = true,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "rfp",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SG2ZEKSJ2ZMX40C3B0",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = false,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "role",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGTY5PE7DQKVWEE4SR",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = true,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "scope",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SG60S2B2ZV54QF1TYD",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = false,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "street_address",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGN4381YD6TMM7DSSZ",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = false,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "target_link_uri",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGKHA138RP7FDFPX6H",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = true,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "token_type",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SG0G4821WN1VZGW3ZN",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = true,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "token_usage",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGCB61SN13FKV80FHA",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = false,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "updated_at",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGY4Z54XPV9SZBT1C7",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = false,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "username",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGFQQXBMQX33F98PQ9",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = false,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "website",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SG16SD5JFG53X82SAX",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IncludeInAccessToken = false,
                            IncludeInIdentityToken = true,
                            IsActive = true,
                            Name = "zoneinfo",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        });
                });

            modelBuilder.Entity("SibSIU.Auth.Database.Entities.AuthClaimTypeScopes", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ClaimTypeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ScopeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("ClaimTypeId");

                    b.HasIndex("ScopeId");

                    b.ToTable("ClaimTypeSettings");

                    b.HasData(
                        new
                        {
                            Id = "01HSD738SGR9N4FKVNV20C91G6",
                            ClaimTypeId = "01HSD738SGZYB8QEJJJBHZX89B",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            ScopeId = "01HSD738SGAM54BA5K5NQ9QW3Q",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGY4JSYS832XT5ZBN6",
                            ClaimTypeId = "01HSD738SGYHWFBDBDF9RMZ1KA",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            ScopeId = "01HSD738SGAM54BA5K5NQ9QW3Q",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGSBS035P933M5CV8D",
                            ClaimTypeId = "01HSD738SGZKQ38YH6ZK83B0QB",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            ScopeId = "01HSD738SG02WSRPD20D4C9EKJ",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGSABQ6JBZN7QGCG3P",
                            ClaimTypeId = "01HSD738SGAXWFXZAPM9X9AV19",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            ScopeId = "01HSD738SG02WSRPD20D4C9EKJ",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SG1EERF5RFG1732WB2",
                            ClaimTypeId = "01HSD738SGKZTG470TCSY7MFPK",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            ScopeId = "01HSD738SG02WSRPD20D4C9EKJ",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SG5PVFT3NXR72XNA9R",
                            ClaimTypeId = "01HSD738SG7RY2YQADTS6GH20M",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            ScopeId = "01HSD738SG02WSRPD20D4C9EKJ",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGHPRFDJQH2Z8XBH9C",
                            ClaimTypeId = "01HSD738SG60S2B2ZV54QF1TYD",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            ScopeId = "01HSD738SG02WSRPD20D4C9EKJ",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SG8QPP5VN8N0P3J5AN",
                            ClaimTypeId = "01HSD738SGNWM10FJK2MA0BHT7",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            ScopeId = "01HSD738SG02WSRPD20D4C9EKJ",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGNRXXG4T7050MCE2A",
                            ClaimTypeId = "01HSD738SGWZ03W6743Q291NJ5",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            ScopeId = "01HSD738SGVGK7HZEK09RD1DWN",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGMYCC48HNRKXD08JE",
                            ClaimTypeId = "01HSD738SG7QSRQQG4ZV26YWPA",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            ScopeId = "01HSD738SGVGK7HZEK09RD1DWN",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGWC8S6GFRJHR9Z5ZD",
                            ClaimTypeId = "01HSD738SG1BM7RYESSB3KG1JE",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            ScopeId = "01HSD738SGV3BMBGNW16Q0G8KJ",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGAZJB080FDBE7HKR3",
                            ClaimTypeId = "01HSD738SGHQWS4BHV6PN3DRGY",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            ScopeId = "01HSD738SGV3BMBGNW16Q0G8KJ",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SG1JVH9J5MQ8GXBS74",
                            ClaimTypeId = "01HSD738SG9XQTQWX81N58BESF",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            ScopeId = "01HSD738SGV3BMBGNW16Q0G8KJ",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGEPN3VTJJMVKMYFQM",
                            ClaimTypeId = "01HSD738SGB372K9CACNFWN003",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            ScopeId = "01HSD738SGV3BMBGNW16Q0G8KJ",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SG8XKJAVA1YP1FYPJX",
                            ClaimTypeId = "01HSD738SG1D8A2267BBGA35NF",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            ScopeId = "01HSD738SGV3BMBGNW16Q0G8KJ",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGB82CX1NW7SY7N96Y",
                            ClaimTypeId = "01HSD738SGM4RN34B6T0V5ZHC8",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            ScopeId = "01HSD738SGV3BMBGNW16Q0G8KJ",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SG7TF7XGBVRBEWAAQ3",
                            ClaimTypeId = "01HSD738SG9AXMAFBHBSW7H482",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            ScopeId = "01HSD738SGV3BMBGNW16Q0G8KJ",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGR6SYH3BMBZA63MTF",
                            ClaimTypeId = "01HSD738SGRTQA0V5Q3MJG87BD",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            ScopeId = "01HSD738SGV3BMBGNW16Q0G8KJ",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGTKG93MMCW7G96CNY",
                            ClaimTypeId = "01HSD738SGFQQXBMQX33F98PQ9",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            ScopeId = "01HSD738SGV3BMBGNW16Q0G8KJ",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGVHMDYSY8FWRPTQHK",
                            ClaimTypeId = "01HSD738SGJ8PP0G2WGNPE420X",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            ScopeId = "01HSD738SGV3BMBGNW16Q0G8KJ",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGKDTMEZMFXB3SG0CF",
                            ClaimTypeId = "01HSD738SG0AYHR2QJDJKM7E2C",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            ScopeId = "01HSD738SGV3BMBGNW16Q0G8KJ",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGX72Q3CW75MM9HCFA",
                            ClaimTypeId = "01HSD738SG16SD5JFG53X82SAX",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            ScopeId = "01HSD738SGV3BMBGNW16Q0G8KJ",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGYGJ5Q0W94NKZ0BD0",
                            ClaimTypeId = "01HSD738SGEVM9YBM493HCQ981",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            ScopeId = "01HSD738SGV3BMBGNW16Q0G8KJ",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGSJ53M4GY9C4CX8QH",
                            ClaimTypeId = "01HSD738SGCB61SN13FKV80FHA",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            ScopeId = "01HSD738SGV3BMBGNW16Q0G8KJ",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGQM290RD3Z13WR92A",
                            ClaimTypeId = "01HSD738SGASQ781MVC1MMB85Z",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            ScopeId = "01HSD738SG2R81Q0MK3GZ7S95J",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        });
                });

            modelBuilder.Entity("SibSIU.Auth.Database.Entities.Scope", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTimeOffset>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.ToTable("Scopes");

                    b.HasData(
                        new
                        {
                            Id = "01HSD738SGAM54BA5K5NQ9QW3Q",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            Name = "email",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SG02WSRPD20D4C9EKJ",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            Name = "address",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGTZ88MZ7DMH538BE8",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            Name = "offline_access",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SG2R81Q0MK3GZ7S95J",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            Name = "openid",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGVGK7HZEK09RD1DWN",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            Name = "phone",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGV3BMBGNW16Q0G8KJ",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            Name = "profile",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SG6M73ZK4XBF1ZD1F8",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            Name = "roles",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        });
                });

            modelBuilder.Entity("SibSIU.Auth.Database.Entities.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "01HSD7391ARHMG2JEQD0MGNFY8",
                            RoleId = "01HSD738SGW1ZJETSDH3AMKJG1",
                            Version = 0L
                        });
                });

            modelBuilder.Entity("SibSIU.Auth.Database.Entities.WorkPlaces", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UnitId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UnitId");

                    b.HasIndex("UserId", "UnitId", "PostId")
                        .IsUnique()
                        .HasDatabaseName("UserWorkPlaceIndex");

                    b.ToTable("WorkPlaces");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.AcademicForm", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DeanCode")
                        .HasColumnType("integer");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTimeOffset>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("DeanCode")
                        .IsUnique()
                        .HasDatabaseName("FormDeanCodeIndex");

                    b.ToTable("AcademicForms");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.AcademicGroup", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AcademicFormId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AcademicLevelId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DirectionOfTrainingId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DirectorateInstituteId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<int>("StartYear")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("AcademicFormId");

                    b.HasIndex("AcademicLevelId");

                    b.HasIndex("DirectionOfTrainingId");

                    b.HasIndex("DirectorateInstituteId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("GroupNameIndex");

                    b.ToTable("AcademicGroups");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.AcademicLevel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DeanCode")
                        .HasColumnType("integer");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTimeOffset>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("DeanCode")
                        .IsUnique()
                        .HasDatabaseName("LevelDeanCodeIndex");

                    b.ToTable("AcademicLevels");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.DepartmentUnit", b =>
                {
                    b.Property<string>("UnitId")
                        .HasColumnType("text");

                    b.HasKey("UnitId");

                    b.ToTable("DepartmentUnits");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.DirectionOfTraining", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DeanCode")
                        .HasColumnType("integer");

                    b.Property<string>("DeveloperInstituteId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImplementingChairId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTimeOffset>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("DeanCode")
                        .IsUnique()
                        .HasDatabaseName("DotDeanCodeIndex");

                    b.HasIndex("DeveloperInstituteId");

                    b.HasIndex("ImplementingChairId");

                    b.ToTable("DirectionOfTraining");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.Gender", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTimeOffset>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = "01HSD738SG8GGCBAAWDGH2RFKF",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            Name = "Мужской",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGC17HZE70XCW8WA6R",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            Name = "Женский",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        });
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.InstituteUnit", b =>
                {
                    b.Property<string>("UnitId")
                        .HasColumnType("text");

                    b.HasKey("UnitId");

                    b.ToTable("InstituteUnits");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.Organization", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("KPP")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)");

                    b.Property<string>("OGRN")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("TIN")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTimeOffset>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("OGRN")
                        .IsUnique()
                        .HasDatabaseName("OrganizationOGRNIndex");

                    b.HasIndex("TIN")
                        .IsUnique()
                        .HasDatabaseName("OrganizationTINIndex");

                    b.ToTable("Organizations");

                    b.HasData(
                        new
                        {
                            Id = "01HSD738SGCNRC89WGXT8S59SF",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            FullName = "Федеральное государственное бюджетное образовательное учреждение высшего образования «Сибирский государственный индустриальный университет»",
                            IsActive = true,
                            KPP = "421701001",
                            OGRN = "1024201470908",
                            ShortName = "СибГИУ",
                            TIN = "4216003509",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        });
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.Partner", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("OrganizationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.Post", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTimeOffset>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("PostNameIndex");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.Pupil", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<char>("ClassLitter")
                        .HasColumnType("character(1)");

                    b.Property<int>("ClassNumber")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("UserId");

                    b.ToTable("Pupils");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTimeOffset>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "01HSD738SGW1ZJETSDH3AMKJG1",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            Name = "Администратор",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        },
                        new
                        {
                            Id = "01HSD738SGVETBE7RK30RRZ8XA",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            Name = "Пользователь",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        });
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.School", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTimeOffset>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.Student", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AcademicGroupId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DeanCode")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<double>("Rank")
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("AcademicGroupId");

                    b.HasIndex("DeanCode")
                        .IsUnique()
                        .HasDatabaseName("StudentDeanCodeIndex");

                    b.HasIndex("UserId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.TempStudentDeanCodeFromDeanDB", b =>
                {
                    b.Property<int>("DeanCode")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.Property<double>("Rank")
                        .HasColumnType("double precision");

                    b.HasKey("DeanCode");

                    b.ToTable("TempStudents");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.Unit", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeanCode")
                        .HasColumnType("integer");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ParentId")
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTimeOffset>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Units");

                    b.HasData(
                        new
                        {
                            Id = "01HSD738SG4T26TQHC3QTNP77M",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            FullName = "Федеральное государственное бюджетное образовательное учреждение высшего образования «Сибирский государственный индустриальный университет»",
                            IsActive = true,
                            ShortName = "СибГИУ",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Version = 0u
                        });
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("BirthOfDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("GenderId")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConfirmedUser")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTemporaryPassword")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTimeOffset>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("GenderId");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "01HSD7391ARHMG2JEQD0MGNFY8",
                            BirthOfDate = new DateTimeOffset(new DateTime(2001, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "admin@sibsiu.ru",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            GenderId = "01HSD738SG8GGCBAAWDGH2RFKF",
                            IsActive = true,
                            IsConfirmedUser = true,
                            IsTemporaryPassword = false,
                            LastName = "Admin",
                            Password = "bP8yMCscAfJFHtkMiAQHxDdz1WoNESV9iX+WWtjN03cZPTVrqXhTC2nHHLjc27uZ/hcsett3VzYa2uOZgtRgIw==",
                            PasswordSalt = "Y/uwds2b2dji7OTpMaGjG0trtxD2APzVV94K68owey5lSbesPusaLE/zqsP7bKEHXFTHcFGPxgt3zJmGtRYwrQ==",
                            Patronymic = "Admin",
                            PhoneNumber = "+7-(900)-00-00-0000",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 3, 20, 5, 59, 40, 592, DateTimeKind.Unspecified).AddTicks(909), new TimeSpan(0, 0, 0, 0, 0)),
                            UserName = "Admin",
                            Version = 0u
                        });
                });

            modelBuilder.Entity("SibSIU.Auth.Database.Entities.AuthClaim", b =>
                {
                    b.HasOne("SibSIU.Auth.Database.Entities.AuthClaimType", "ClaimType")
                        .WithMany("Claims")
                        .HasForeignKey("ClaimTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SibSIU.UserData.Database.Entities.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClaimType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SibSIU.Auth.Database.Entities.AuthClaimTypeScopes", b =>
                {
                    b.HasOne("SibSIU.Auth.Database.Entities.AuthClaimType", "ClaimType")
                        .WithMany("Settings")
                        .HasForeignKey("ClaimTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SibSIU.Auth.Database.Entities.Scope", "Scope")
                        .WithMany("ClaimTypes")
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClaimType");

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("SibSIU.Auth.Database.Entities.UserRole", b =>
                {
                    b.HasOne("SibSIU.UserData.Database.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SibSIU.UserData.Database.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SibSIU.Auth.Database.Entities.WorkPlaces", b =>
                {
                    b.HasOne("SibSIU.UserData.Database.Entities.Post", "Post")
                        .WithMany("EmployeeUnits")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SibSIU.UserData.Database.Entities.Unit", "Unit")
                        .WithMany("Employees")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SibSIU.UserData.Database.Entities.User", "User")
                        .WithMany("WorkPlaces")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Unit");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.AcademicGroup", b =>
                {
                    b.HasOne("SibSIU.UserData.Database.Entities.AcademicForm", "Form")
                        .WithMany("Groups")
                        .HasForeignKey("AcademicFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SibSIU.UserData.Database.Entities.AcademicLevel", "Level")
                        .WithMany("Groups")
                        .HasForeignKey("AcademicLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SibSIU.UserData.Database.Entities.DirectionOfTraining", "DirectionOfTraining")
                        .WithMany("AcademicGroups")
                        .HasForeignKey("DirectionOfTrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SibSIU.UserData.Database.Entities.InstituteUnit", "DirectorateInstitute")
                        .WithMany("AcademicGroupsInDirectorate")
                        .HasForeignKey("DirectorateInstituteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DirectionOfTraining");

                    b.Navigation("DirectorateInstitute");

                    b.Navigation("Form");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.DepartmentUnit", b =>
                {
                    b.HasOne("SibSIU.UserData.Database.Entities.Unit", "Unit")
                        .WithOne("DepartmentUnit")
                        .HasForeignKey("SibSIU.UserData.Database.Entities.DepartmentUnit", "UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.DirectionOfTraining", b =>
                {
                    b.HasOne("SibSIU.UserData.Database.Entities.InstituteUnit", "DeveloperInstitute")
                        .WithMany("DevelopDirectionOfTraining")
                        .HasForeignKey("DeveloperInstituteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SibSIU.UserData.Database.Entities.DepartmentUnit", "ImplementingChair")
                        .WithMany("ImplementedDirections")
                        .HasForeignKey("ImplementingChairId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeveloperInstitute");

                    b.Navigation("ImplementingChair");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.InstituteUnit", b =>
                {
                    b.HasOne("SibSIU.UserData.Database.Entities.Unit", "Unit")
                        .WithOne("InstituteUnit")
                        .HasForeignKey("SibSIU.UserData.Database.Entities.InstituteUnit", "UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.Partner", b =>
                {
                    b.HasOne("SibSIU.UserData.Database.Entities.Organization", "Organization")
                        .WithMany("Partners")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SibSIU.UserData.Database.Entities.Post", "Post")
                        .WithMany("Partners")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SibSIU.UserData.Database.Entities.User", "User")
                        .WithMany("Partners")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.Pupil", b =>
                {
                    b.HasOne("SibSIU.UserData.Database.Entities.School", "School")
                        .WithMany("Pupils")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SibSIU.UserData.Database.Entities.User", "User")
                        .WithMany("Pupils")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.Student", b =>
                {
                    b.HasOne("SibSIU.UserData.Database.Entities.AcademicGroup", "Group")
                        .WithMany("Students")
                        .HasForeignKey("AcademicGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SibSIU.UserData.Database.Entities.User", "User")
                        .WithMany("Students")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.Unit", b =>
                {
                    b.HasOne("SibSIU.UserData.Database.Entities.Unit", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.User", b =>
                {
                    b.HasOne("SibSIU.UserData.Database.Entities.Gender", "Gender")
                        .WithMany("Users")
                        .HasForeignKey("GenderId");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("SibSIU.Auth.Database.Entities.AuthClaimType", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Settings");
                });

            modelBuilder.Entity("SibSIU.Auth.Database.Entities.Scope", b =>
                {
                    b.Navigation("ClaimTypes");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.AcademicForm", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.AcademicGroup", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.AcademicLevel", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.DepartmentUnit", b =>
                {
                    b.Navigation("ImplementedDirections");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.DirectionOfTraining", b =>
                {
                    b.Navigation("AcademicGroups");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.Gender", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.InstituteUnit", b =>
                {
                    b.Navigation("AcademicGroupsInDirectorate");

                    b.Navigation("DevelopDirectionOfTraining");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.Organization", b =>
                {
                    b.Navigation("Partners");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.Post", b =>
                {
                    b.Navigation("EmployeeUnits");

                    b.Navigation("Partners");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.School", b =>
                {
                    b.Navigation("Pupils");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.Unit", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("DepartmentUnit");

                    b.Navigation("Employees");

                    b.Navigation("InstituteUnit");
                });

            modelBuilder.Entity("SibSIU.UserData.Database.Entities.User", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Partners");

                    b.Navigation("Pupils");

                    b.Navigation("Students");

                    b.Navigation("UserRoles");

                    b.Navigation("WorkPlaces");
                });
#pragma warning restore 612, 618
        }
    }
}
